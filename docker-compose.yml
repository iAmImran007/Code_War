version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: code_war_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"  # Using 5433 to avoid conflict with local PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - code_war_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: code_war_redis
    ports:
      - "6380:6379"  # Using 6380 to avoid conflict with local Redis
    volumes:
      - redis_data:/data
    networks:
      - code_war_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Your Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: code_war_app
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SSL_MODE=${SSL_MODE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=${ENVIRONMENT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_MONTHLY_PRICE_ID=${STRIPE_MONTHLY_PRICE_ID}
      - STRIPE_YEARLY_PRICE_ID=${STRIPE_YEARLY_PRICE_ID}
      - DOMAIN=${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - code_war_network
    restart: unless-stopped
    # Uncomment if you want to mount your source code for development
    # volumes:
    #   - .:/app
    #   - /app/vendor

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: code_war_adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - code_war_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  code_war_network:
    driver: bridge
